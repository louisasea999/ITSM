<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       ">

	<bean id="springContextUtil" class="com.yum.itsm.ddtalk.common.spring.SpringContextUtil" lazy-init="false"/>
	<bean id="httpClientService" class="com.yum.itsm.ddtalk.common.service.impl.HttpClientServiceImpl" />
	<bean id="ddTalkService" class="com.yum.itsm.ddtalk.common.service.impl.DDTalkServiceImpl">
		<property name="corpId" value="${ddtalk.corpid}" />
		<property name="corpSecret" value="${ddtalk.corpsecret}" />
	</bean>
	
	<bean
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
				<property name="driverClass" value="${db.driver}" />
				<property name="jdbcUrl" value="${db.url}" />
				<property name="user" value="${db.username}" />
				<property name="password" value="${db.password}" />

				<property name="preferredTestQuery" value="select 1" />
				<property name="testConnectionOnCheckout" value="true" />

				<!--
				<property name="testConnectionOnCheckin" value="false" />
				<property name="idleConnectionTestPeriod" value="18000" />
				<property name="maxIdleTime" value="25000" />
				<property name="minEvictableIdleTimeMillis" value="3600000" />
				<property name="autoCommitOnClose" value="false" />
				 -->
			</bean>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- myBatis 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis.xml" />
		<!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation有一个即可，当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 -->
		<property name="mapperLocations" value="classpath:mybatis/*.xml"/>
	</bean>

	<!-- 配置sqlSessionTemplate -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yum.itsm.ddtalk.busi.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">  
		<property name="velocityProperties">     
			<props>     
				<prop key="resource.loader">class</prop>
				<prop key="class.resource.loader.class">     
					org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader     
				</prop>     
				<prop key="velocimacro.library"></prop>     
			</props>     
		</property>     
	</bean>
	
	<!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
		<!--<property name="mapperInterface" value="ConnectionInformationMapper" />-->
		<!--<property name="sqlSessionFactory" ref="sqlSessionFactory" />-->
	<!--</bean>-->

	<!-- mybatis 自动装载Mapper映射器（接口类），如果是自定义DAO就不能使用此扫描器 -->
	<!--basePackage指定要扫描的包，在此包之下的映射器都会被搜索到。可指定多个包，包与包之间用逗号或分号分隔 -->
	<!--
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ciicsh.*.dao" />
	</bean>
	 -->
	<!-- myBatis 配置结束 -->

	<!-- 用户的密码加密或解密 -->
	<!-- <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder" /> -->

	<!--<bean id="springContextUtil" class="com.ciicsh.common.spring.SpringContextUtil" />-->

	<!-- <bean id="sysParameterService" class="com.hp.ciic.system.service.impl.SysParameterServiceImpl" /> -->

	<!-- 事务控制 -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy> -->

	<!-- tx声明事务管理使用：使用声明式事务管理的方法就是添加下边的配置内容，在dao类和service类中tx会自动拦截进行事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="edit*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for=""/>

			<tx:method name="find*" propagation="SUPPORTS"/>
			<tx:method name="get*" propagation="SUPPORTS"/>
			<tx:method name="select*" propagation="SUPPORTS"/>
			<tx:method name="query*" propagation="SUPPORTS"/>

		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!--把事务控制在Service层-->
		<aop:pointcut id="txPointcut"
					  expression="(execution(* com.yum..service.*.*(..)))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
</beans>