<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<bean class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
				<property name="driverClassName" value="${db.driver}" />
				<property name="url" value="${db.url}" />
				<property name="username" value="${db.username}" />
				<property name="password" value="${db.password}" />
				<!--maxActive: 最大连接数量 -->
				<property name="maxActive" value="20" />
				<!--minIdle: 最小空闲连接 -->
				<property name="minIdle" value="1" />
				<!--maxIdle: 最大空闲连接 -->
				<property name="maxIdle" value="10" />
				<!--initialSize: 初始化连接 -->
				<property name="initialSize" value="1" />
				<!-- 连接被泄露时是否打印 -->
				<property name="logAbandoned" value="true" />
				<!--removeAbandoned: 是否自动回收超时连接 -->
				<property name="removeAbandoned" value="true" />
				<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
				<property name="removeAbandonedTimeout" value="10" />
				<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->
				<property name="maxWait" value="1000" />
				<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
				<property name="timeBetweenEvictionRunsMillis" value="10000" />
				<!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
				<property name="numTestsPerEvictionRun" value="10" />
				<!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 -->
				<property name="minEvictableIdleTimeMillis" value="10000" />
				<property name="testOnBorrow" value="true" />  
				<property name="validationQuery" value="select 1" />  
			</bean>
		</property>
	</bean>

	<!-- myBatis 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis.xml" />
		<!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation有一个即可，当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 -->  
		 <property  name="mapperLocations" value="classpath*:com/yum/itsm/ddtalk/**/mapper*/*Mapper.xml"/>
	</bean>
	
	<!-- 配置sqlSessionTemplate -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- mybatis 自动装载Mapper映射器（接口类），如果是自定义DAO就不能使用此扫描器 -->
	<!--basePackage指定要扫描的包，在此包之下的映射器都会被搜索到。可指定多个包，包与包之间用逗号或分号分隔 -->

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yum.itsm.ddtalk.**.mapperAPI" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- myBatis 配置结束 -->
	
	<!-- 用户的密码加密或解密 -->
	<!-- <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder" /> -->

	<bean id="springContextUtil" class="com.yum.itsm.ddtalk.common.spring.SpringContextUtil" />

	<!-- 事务控制 -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy> -->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- tx声明事务管理使用：使用声明式事务管理的方法就是添加下边的配置内容，在dao类和service类中tx会自动拦截进行事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="edit*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for=""/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for=""/>
			
			<tx:method name="find*" propagation="SUPPORTS"/>
			<tx:method name="get*" propagation="SUPPORTS"/>
			<tx:method name="select*" propagation="SUPPORTS"/>
			<tx:method name="query*" propagation="SUPPORTS"/>
			
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!--把事务控制在Service层-->
		<aop:pointcut id="txPointcut"
			expression="(execution(* com.yum.itsm.ddtalk..service.*.*(..)))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
</beans>